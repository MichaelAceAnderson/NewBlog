# NOTE: Docker cannot fetch files outside the build context
# Therefore, we build this image from the project's root directory

# Base image
# To communicate with the Nginx container, FPM is necessary
# Alpine is a lightweight version of Linux that helps reduce the image size
FROM php:8.2-fpm-alpine

# Set the working directory
WORKDIR /var/www/html/

# Install necessary system dependencies for all operations
RUN apk update && apk add --no-cache \
	curl \
	bash

# Install the required PHP extensions
RUN docker-php-ext-install pdo pdo_mysql
# Copy PHP configuration files
COPY .docker/php/conf/ /usr/local/etc/php/

# Since Nginx passes requests to PHP-FPM, it must contain the application's source code
COPY app/ ./

# Copy the entrypoint script
COPY .docker/php/init/prod/entrypoint.sh /usr/local/bin/entrypoint.sh
# Grant execution rights to the entrypoint script
RUN chmod +x /usr/local/bin/entrypoint.sh
# Execute the entrypoint script at each container startup
# NOTE: Adding an ENTRYPOINT in the Dockerfile overrides the parent image's ENTRYPOINT
ENTRYPOINT [ "entrypoint.sh" ]
# Start PHP-FPM
# NOTE: Specifying a new ENTRYPOINT cancels the parent image's CMD
# and requires redefining the container's startup command
CMD [ "php-fpm" ]

# Make the PHP server accessible on port 9000
EXPOSE 9000